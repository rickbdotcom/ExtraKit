
import Foundation
import Utility
import AppKit

func main() {
	var inputPath: String!
	var outputPath: String!

	let arguments = Array(CommandLine.arguments.dropFirst())

	let parser = ArgumentParser(
		usage: "genswiftfonts --in <fonts folder> --out <swift output file path>"
	, 	overview: "This tool generates fonts from font files"
	)

	let inOpt = parser.add(option: "--in", shortName: nil, kind: String.self, usage: "path to fonts folder", completion: nil)
	let outOpt = parser.add(option: "--out", shortName: nil, kind: String.self, usage: "path to output swift source file", completion: nil)

	do {
		let result = try parser.parse(arguments)
		inputPath = result.get(inOpt)
		outputPath = result.get(outOpt)
	} catch {
		print("error: \(error)")
		return
	}
	autogeneratedLine()
	line("import UIKit")
	line()
	line("extension UIFont {")
	line()
	findFiles(extension: ["ttf", "otf"], in: inputPath).sorted { $0.lastPathComponent < $1.lastPathComponent }.forEach {
		font($0)
	}
	line("}")
	output(to: outputPath)
}

func font(_ url: Foundation.URL) {
	if let dataProvider = CGDataProvider(filename: UnsafePointer((url.path as NSString).utf8String!)) {
		let cgFont = CGFont(dataProvider)!
		let font = CTFontCreateWithGraphicsFont(cgFont, 10, nil, nil) as NSFont
		let fontName = font.fontName
		let funcName = "font\(fontName.swiftName().capitalizingFirstLetter())"
		line("\tstatic func \(funcName)(of size: CGFloat) { return UIFont(name: \"fontName\", size: size) }")
	}
}

main()
