import Foundation
import Utility

// swiftlint:disable cyclomatic_complexity

func main() {
	var storyboardsPath: String!
	var outputPath: String!
	var imports: [String]?

	let arguments = Array(CommandLine.arguments.dropFirst())

	let parser = ArgumentParser(
		usage: "genswiftstoryboards --storyboards <storyboards path> --imports <Framework imports> --src <swift output file path>"
	, 	overview: "This tool generates code from storyboards"
	)

	let storyboardsOpt = parser.add(option: "--storyboards", shortName: nil, kind: String.self, usage: "path to storyboards folder", completion: nil)
	let srcOpt = parser.add(option: "--src", shortName: nil, kind: String.self, usage: "path to output swift source file", completion: nil)
	let importsOpt = parser.add(option: "--imports", shortName: nil, kind: [String].self, usage: "additional Framework imports", completion: nil)

	do {
		let result = try parser.parse(arguments)
		storyboardsPath = result.get(storyboardsOpt)
		outputPath = result.get(srcOpt)
		imports = result.get(importsOpt)
	} catch {
		print(error)
	}

	autogeneratedLine()
	line("""
	import UIKit
	import ExtraKit
	""")
	imports?.forEach { line("import \($0)") }
	line()
	findFiles(extension: "storyboard", in: storyboardsPath).sorted { $0.lastPathComponent < $1.lastPathComponent }.forEach {
		storyboard($0)
	}
	output(to: outputPath)

}

func storyboard(_ url: Foundation.URL) {
	do {
		let doc = try XMLDocument(contentsOf: url, options: [])
		var vcs = [XMLElement]()
		if let cs = try doc.nodes(forXPath:"//viewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//tableViewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//tabBarController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//navigationController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//splitViewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//viewControllerPlaceholder") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//collectionViewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//pageViewController") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		if let cs = try doc.nodes(forXPath:"//embed") as? [XMLElement] {
			vcs.append(contentsOf: cs)
		}
		guard vcs.count > 0 else {
			return
		}

		let ids: [(storyboardIdentifier: String, id: String, customClass: String, segues: [String])]! = vcs.compactMap { svc in
			if let storyboardIdentifier = svc.attribute(forName:"storyboardIdentifier")?.stringValue
			, let id = svc.attribute(forName:"id")?.stringValue {
				let customClass = svc.attribute(forName: "customClass")?.stringValue ?? "UIViewController"
				var segues = [String]()
				if let segueNodes = try? svc.nodes(forXPath:"..//segue") {
					segueNodes.forEach {
						if let elem = ($0 as? XMLElement),
							let identifier = elem.attribute(forName:"identifier")?.stringValue,
							!identifier.isEmpty {
							segues.append(identifier)
						}
					}
				}
				return (storyboardIdentifier, id, customClass, segues)
			}
			return nil
		}
		guard ids.isEmpty == false else { return }

		let fileName = url.deletingPathExtension().lastPathComponent
		if fileName.validSwiftString() {
			outputString.addLine("struct Storyboard\(fileName) {")
			outputString.addLine()

			ids.forEach {
				if $0.storyboardIdentifier.validSwiftString() {
					outputString.addLine("struct \($0.storyboardIdentifier): StoryboardScene {")
					outputString.addLine("typealias StoryboardClass = \($0.customClass)")

					if !$0.segues.isEmpty {
						$0.segues.forEach { segue in
							if segue.validSwiftString() {
								outputString.addLine("let segue\(segue.capitalizingFirstLetter())  = \"\(segue)\"")
							}
						}
					}
					outputString.addLine("let identifier = (\"\($0.storyboardIdentifier)\", \"\(fileName)\")")
					outputString.addLine("}")
					outputString.addLine("let \($0.storyboardIdentifier.uncapitalized()) = \($0.storyboardIdentifier)()")
					outputString.addLine("")
				}
			}

			outputString.addLine("}")
			outputString.addLine("let storyboard\(fileName) = Storyboard\(fileName)()")
		}
		outputString.addLine()
	} catch _ {

	}
}

main()

/*

imports.components(separatedBy: " ").filter {
	$0 != "none"
}.forEach {
	outputString.addLine("import \($0)")
}
outputString.addLine("")



outputString += """
/**
	Generated from the storyboards used by the app.
*/

"""
CommandLine.arguments[3..<CommandLine.arguments.count].sorted { $0 < $1 }.forEach {
	generateStoryboardIdentifierSourceFile($0)
}

try? outputString.write(toFile:outputPath, atomically: true, encoding: String.Encoding.utf8)
*/
