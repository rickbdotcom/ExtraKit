import Foundation
import Files

var tabs = 0
var outputString = ""

extension String {

	mutating func addLine(_ line: String = "") {

		if line.suffix(1) == "}" {
			tabs -= 1
		}
		if tabs > 0 {
			self += String(repeating: "\t", count: tabs)
		}

		self += "\(line)\n"

		if line.suffix(1) == "{" {
			tabs += 1
		}
	}

	func uncapitalized() -> String {
		return replacingCharacters(in: startIndex..<index(startIndex, offsetBy:1), with: self[startIndex...startIndex].lowercased())
	}
}

func line(_ line: String = "") {
	outputString.addLine(line)
}

func autogeneratedLine() {
	var args = CommandLine.arguments
	args[0] = URL(string: args[0])!.lastPathComponent

	line("""
	// autogenerated from \(args.joined(separator: " "))

	""")
}

func output(to path: String) {
	try? outputString.write(toFile:path, atomically: true, encoding: String.Encoding.utf8)
}

func findFiles(extension ext: String, in path: String) -> [String] {
	return []
}

func findFolders(extension ext: String, in path: String) -> [String] {
	var colors = [String]()
	do {
		try Folder(path: path).makeSubfolderSequence(recursive: true).forEach { folder in
			if URL(string: folder.name)?.pathExtension == ext {
				colors.append(folder.name)
			}
		}
	} catch let error {
		print(error)
	}
	return colors
}
