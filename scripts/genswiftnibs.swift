import Foundation
import Utility

func main() {
	var inputPath: String!
	var outputPath: String!
	var imports: [String]?

	let arguments = Array(CommandLine.arguments.dropFirst())

	let parser = ArgumentParser(
		usage: "genswiftnibs --in <nibs path> --out <swift output file path> --imports <Framework imports>"
	, 	overview: "This tool generates code from nibs"
	)

	let inOpt = parser.add(option: "--in", shortName: nil, kind: String.self, usage: "path to nibs folder", completion: nil)
	let outOpt = parser.add(option: "--out", shortName: nil, kind: String.self, usage: "path to output swift source file", completion: nil)
	let importsOpt = parser.add(option: "--imports", shortName: nil, kind: [String].self, usage: "additional Framework imports", completion: nil)

	do {
		let result = try parser.parse(arguments)
		inputPath = result.get(inOpt)
		outputPath = result.get(outOpt)
		imports = result.get(importsOpt)
	} catch {
		print("error: \(error)")
		return
	}

	autogeneratedLine()
	line("import UIKit")
	line("import ExtraKit")
	imports?.forEach { line("import \($0)") }
	line()
	findFiles(extension: ["xib"], in: inputPath).sorted { $0.lastPathComponent < $1.lastPathComponent }.forEach {
		nib($0)
	}
	output(to: outputPath)
}

func nib(_ url: Foundation.URL) {
	do {
		let doc = try XMLDocument(contentsOf: url, options: [])

		let nibName = url.deletingPathExtension().lastPathComponent
		let varName = "nib\(nibName)"

		var ownerClass = "NSObject"
		var topClass = "NSObject"

		if let elem = (try doc.nodes(forXPath:"//placeholder") as? [XMLElement])?.first {
			if let customClass = elem.attribute(forName:"customClass")?.stringValue {
				ownerClass = customClass
			}
		}
		if let elem = (try doc.nodes(forXPath:"//collectionViewCell") as? [XMLElement])?.first {
			topClass = "UICollectionViewCell"
			if let customClass = elem.attribute(forName:"customClass")?.stringValue {
				topClass = customClass
			}
		} else if let elem = (try doc.nodes(forXPath:"//tableViewCell") as? [XMLElement])?.first {
			topClass = "UITableViewCell"
			if let customClass = elem.attribute(forName:"customClass")?.stringValue {
				topClass = customClass
			}
		} else if let elem = (try doc.nodes(forXPath:"//view") as? [XMLElement])?.first {
			topClass = "UIView"
			if let customClass = elem.attribute(forName:"customClass")?.stringValue {
				topClass = customClass
			}
		}

		line("""
		let \(varName) = NibDescription(nibName: "\(nibName)", ownerClass: \(ownerClass).self, topLevelObjectClass: \(topClass).self)
		""")
	} catch {

	}
}

main()
